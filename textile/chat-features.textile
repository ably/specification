---
title: Chat Features
section: client-lib-development-guide
index: 55
jump_to:
  Help with:
    - Chat Features Overview#overview
---

h2(#overview). Overview

This document outlines the feature specification for the Ably Chat product.

The key words "must", "must not", "required", "shall", "shall not", "should", "should not", "recommended",  "may", and "optional" (whether lowercased or uppercased) in this document are to be interpreted as described in "RFC 2119":https://tools.ietf.org/html/rfc2119.

The over-the-wire protocol for Chat, as well as implementation details, may be found on the chat protocol page.

h2(#overview). Chat Specification Version

* @(CHA-V1)@ **Specification Version**: This document defines the Ably chat library features specification ('features spec').
** @(CHA-V1a)@ The current version of the Chat library feature specification is version @0.1.0@.

h2(#general). General Principles

* @(CHA-GP1)@ As far as is practicable, the implementation details such as underlying Realtime Channels should be hidden from the public API. This allows developers to interact with Chat without having to understand many low-level primitives.
* @(CHA-GP2)@ The public API should avoid implicit operations as a side-effect to some other operation. For example, adding a subscriber to messages in a Chat Room should not automatically trigger that Room to attach. This is in contrast to the current core SDKs. Avoiding side-effects provides a clean, easy to understand API.
** @(CHA-GP2a)@ @[Testable]@ Whenever the Chat SDK fetches a realtime channel, it must do so with the @attachOnSubscribe@ channel option set to @false@.
* @(CHA-GP3)@ Wherever possible, Chat features should be exposed in the public API as properties of their parent. For example, @messages@ would be considered a property of a @room@ object. This allows for greater composability and extensibility in the future.
* @(CHA-GP4)@ Avoid overloading methods and optional parameters. Prefer object-type parameters wherever practical and idiomatic.

h2(#initialization). Initialization

* @(CHA-IN1)@ In order to initialize a chat client, the user must supply an instance of @RealtimeClient@. Upon initialization, the chat client must configure this client in order to allow Ably to track usage of the Chat SDK, as described in the sub-items below.
** @(CHA-IN1a)@ @[Testable]@ Upon initialization of the chat client, it must create a wrapper SDK proxy client by calling @createWrapperSDKProxy@ on the @RealtimeClient@.
** @(CHA-IN1b)@ @[Testable]@ When creating the @CHA-IN1a@ wrapper SDK proxy client, the chat client must pass a @WrapperSDKProxyOptions@ whose @agents@ describe the Chat SDK and its version. For example, @{ "agents": { "chat-js": "1.0.1" } }@.
** @(CHA-IN1c)@ SDK authors must ensure that they have registered the agents used by @CHA-IN1b@ in the common repository, per "@RSC7d5@":../features#RSC7d5.
** @(CHA-IN1d)@ @[Testable]@ The chat client must use the wrapper SDK proxy client created in @CHA-IN1a@ as the realtime client on which it performs all subsequent actions (for example, fetching channels or calling @#request@).

h2(#rooms). Rooms

h3(#rooms-general). General Information

A Room is the atomic unit of Chat. All chat operations are performed in the context of a room that a client is currently attached to. As the Room is the atomic unit, its state should be considered as the combination of the states of underlying resources.

h3(#connection-status). Connection Status

The connection status of the Chat client closely reflects the status of the underlying Realtime client, but with one major difference. When a disconnect takes place, we assume that it is transient for a certain amount of time, before eventually emitting an event. This prevents customers being unnecessarily sent connection status updates if the connection recovers quickly (e.g. when going through a tunnel).

* @(CHA-CS1)@ Every chat client has a @status@, which describes the current status of the connection.
** @(CHA-CS1a)@ The @INITIALIZED@ status is a default status when the realtime client is first initialized. This value may be seen if the realtime client doesn't have autoconnect turned on.
** @(CHA-CS1b)@ The @CONNECTING@ status is used when the client is in the process of connecting to Ably servers.
** @(CHA-CS1c)@ The @CONNECTED@ status is used when the client connected to Ably servers.
** @(CHA-CS1d)@ The @DISCONNECTED@ status is used when the client is not currently connected to Ably servers. This state may be temporary as the underlying Realtime SDK seeks to reconnect.
** @(CHA-CS1e)@ The @SUSPENDED@ status is used when the client is in an extended state of disconnection, but will attempt to reconnect.
** @(CHA-CS1f)@ The @FAILED@ status is used when the client is disconnected from the Ably servers due to some non-retriable failure such as authentication failure. It will not attempt to reconnect.
* @(CHA-CS2)@ The connection must expose its current status.
** @(CHA-CS2a)@ @[Testable]@ The chat client must expose its current connection status, a single value from the list in @CHA-CS1@.
** @(CHA-CS2b)@ @[Testable]@ The chat client must expose the latest error, if any, associated with its current status.
* @(CHA-CS3)@ @[Testable]@ The initial status and error of the connection must be whatever status the realtime client returns whilst the connection status object is constructed.
* @(CHA-CS4)@ The chat client must allow its connection status to be observed by clients.
** @(CHA-CS4a)@ @[Testable]@ Connection status update events must contain the newly entered connection status.
** @(CHA-CS4b)@ @[Testable]@ Connection status update events must contain the previous connection status.
** @(CHA-CS4c)@ @[Testable]@ Connection status update events must contain the connection error (if any) that pertains to the newly entered connection status.
** @(CHA-CS4d)@ @[Testable]@ Clients must be able to register a listener for connection status events and receive such events.
** @(CHA-CS4e)@ @[Testable]@ Clients must be able to unregister a listener for connection status events and from that point onwards, cease to receive such events on that listener.
** @(CHA-CS4f)@ @[Testable]@ Clients must be able to unregister all listeners for connections status events, after which point, all currently registered listeners will cease to receive such events.
* @(CHA-CS5)@ The chat client must monitor the underlying realtime connection for connection status changes.
** @(CHA-CS5a)@ The chat client must suppress transient disconnection events. It is not uncommon for Ably servers to perform connection shedding to balance load, or due to retiring. Clients should not need to concern themselves with transient events.
*** @(CHA-CS5a1)@ @[Testable]@ If the realtime connection status transitions from @CONNECTED@ to @DISCONNECTED@, the chat client connection status must not change. A 5 second transient disconnect timer shall be started.
*** @(CHA-CS5a2)@ @[Testable]@ If a transient disconnect timer is active and the realtime connection status changes to @DISCONNECTED@ or @CONNECTING@, the library must not emit a status change.
*** @(CHA-CS5a3)@ @[Testable]@ If a transient disconnect timer is active and the realtime connections status changes to @CONNECTED@, @SUSPENDED@ or @FAILED@, the library shall cancel the transient disconnect timer. The superseding status change shall be emitted.
*** @(CHA-CS5a4)@ @[Testable]@ If a transient disconnect timer expires, the library shall emit a connection status change event. This event must contain the current status of timer expiry, along with the @original@ error that initiated the transient disconnect timer.
** @(CHA-CS5b)@ @[Testable]@ Not withstanding @CHA-CS5a@. If a connection state event is observed from the underlying realtime library, the client must emit a status change event. The current status of that event shall reflect the status change in the underlying realtime library, along with the accompanying error.

h3(#rooms-status). Room Statuses

The status of any given Chat Room is determined by the state of the underlying realtime channel. For more information on this, see "@Room Lifecycle@":#rooms-lifecycle.

* @(CHA-RS1)@ Every room has a @status@, which describes the current status of the room.
** @(CHA-RS1a)@ The @INITIALIZED@ status is the initial status before any attachment operations have taken place.
** @(CHA-RS1b)@ The @ATTACHING@ status is used when the room is in the process of attaching to Ably.
** @(CHA-RS1c)@ The @ATTACHED@ status means that the room is fully connected to Ably and functioning normally.
** @(CHA-RS1d)@ The @DETACHING@ status is used when the room is in the process of detaching from Ably.
** @(CHA-RS1e)@ The @DETACHED@ status means that the room has been detached from Ably by a user-initiated request. It will not attempt to re-connect without explicit intervention.
** @(CHA-RS1f)@ The @SUSPENDED@ status is when the room has been detached from Ably for an extended period of time. The room will periodically attempt to reconnect.
** @(CHA-RS1g)@ The @FAILED@ status means that something has gone wrong with the room (such as lack of permissions). The room will not attempt to connect to Ably and will require user intervention.
** @(CHA-RS1h)@ The @RELEASING@ status means that the room is being released and the underlying resources are being cleaned up.
** @(CHA-RS1i)@ The @RELEASED@ status means that the room has been cleaned up and the object can no longer be used.
** @(CHA-RS1j)@ The @INITIALIZING@ status is reserved for React uses, and should not be included outside of the JS/TS SDK.
* @(CHA-RS2)@ A room must expose its current status.
** @(CHA-RS2a)@ @[Testable]@ A room must expose its current status, a single value from the list provided above.
** @(CHA-RS2b)@ A room must expose the latest error, if any, associated with its current status.
*** @(CHA-RS2b1)@ @[Testable]@ If an error is associated with the current status, then this must be exposed.
*** @(CHA-RS2b2)@ @[Testable]@ If there is no error is associated with the current status, then the room status should not expose any errors.
* @(CHA-RS3)@ @[Testable]@ A newly created room must have a current status of @INITIALIZED@.
* @(CHA-RS4)@ A room must allow changes to room status to be observed by clients.
** @(CHA-RS4a)@ @[Testable]@ Room status update events must contain the newly entered room status.
** @(CHA-RS4b)@ @[Testable]@ Room status update events must contain the previous room status.
** @(CHA-RS4c)@ @[Testable]@ Room status update events must not contain an error, where that error pertains to the current status.
** @(CHA-RS4d)@ @[Testable]@ Room status update events must contain an error, where that error pertains to the current status.
** @(CHA-RS4e)@ @[Testable]@ Clients must be able to register a listener for room status updates and receive such events.
** @(CHA-RS4f)@ @[Testable]@ Clients must be able to unregister a listener for room status updates and from that point onwards, cease to receive such events on that listener only.
** @(CHA-RS4g)@ @[Testable]@ Clients must be able to unregister all listeners for room status updates and from that point onwards, cease to receive such events on all listeners.

h3(#rooms-lifecycle). Room Lifecycle

Rooms are considered the atomic unit of chat underpinned by a realtime channel.

There are three room lifecycle operations: @ATTACH@, @DETACH@, @RELEASE@.

Discontinuities in Realtime connections can happen - whereby continuity of message delivery is disrupted. Therefore each feature may also experience discontinuity events - where the user may need to take some action to restore continuity in their application. In Chat, we explicitly tell the user when there's a discontinuity, rather than require them to implement the monitoring themselves.

h4(#rooms-lifecycle-operations). Room Lifecycle Operations

* @(CHA-RL13)@ The room lifecycle shall maintain a @hasAttachedOnce@ flag, which represents whether or not the next @ATTACHED@ channel state change is the first one received (i.e. the product of a call to @ATTACH@). It defaults to @false@. Subsequent specification items will explain how this flag is manipulated.
* @(CHA-RL14)@ The room lifecycle shall maintain a @isExplicitlyDetached@ flag, which represents whether or not the current room @DETACHED@ status is the result of a user-initiated @detach@ operation. It defaults to @false@. Subsequent specification items will explain how this flag is manipulated.
* @(CHA-RL1)@ A room must be explicitly attached via the @ATTACH@ operation.
** @(CHA-RL1a)@ @[Testable]@ If the room is already in the @ATTACHED@ status, then this operation is no-op.
** @(CHA-RL1j)@ This specification point has been removed.
** @(CHA-RL1b)@ @[Testable]@ If the room is in the @RELEASING@ status, the operation shall be rejected with an @ErrorInfo@ with the @RoomIsReleasing@ error code from the "chat-specific error codes":#error-codes.
** @(CHA-RL1c)@ @[Testable]@ If the room is in the @RELEASED@ status, the operation shall be rejected with an @ErrorInfo@ with the @RoomIsReleased@ error code from the "chat-specific error codes":#error-codes.
** @(CHA-RL1d)@ @[Testable]@ If a room lifecycle operation is already in progress, this operation shall wait until the current operation completes before continuing, subject to @CHA-RL7@.
** @(CHA-RL1e)@ @[Testable]@ Notwithstanding the above points, when the attachment operation begins, the room shall be transitioned to the @ATTACHING@ status.
** @(CHA-RL1k)@ @[Testable]@ Following the @CHA-RL1e@ transition, the client shall initiate and await the attachment of the realtime channel.
*** @(CHA-RL1k1)@ @[Testable]@ If the attachment is successful, the room status shall be transitioned to @ATTACHED@, the @isExplicitlyDetached@ flag shall be set to @false@ and the @hasAttachedOnce@ flags set to @true@.
*** @(CHA-RL1k2)@ @[Testable]@ If the attachment is unsuccessful (i.e. @channel.attach()@ throws an error), the attach error is the @ErrorInfo@ from the underlying channel operation. The current channel state shall be used to determine the new room status, which will be enacted, accompanied by the attach error.
*** @(CHA-RL1k3)@ @[Testable]@ If the attachment is unsuccessful (i.e. @channel.attach()@ throws an error), the attach error will be thrown as the result of the room @attach()@ operation.
** @(CHA-RL1f)@ This specification point has been removed. It was valid up until the single-channel migration.
** @(CHA-RL1g)@ This specification point has been removed. It was valid up until the single-channel migration.
*** @(CHA-RL1g1)@ This specification point has been removed. It was valid up until the single-channel migration.
*** @(CHA-RL1g2)@ This specification point has been removed. It was valid up until the single-channel migration.
*** @(CHA-RL1g3)@ This specification point has been removed. It was valid up until the single-channel migration.
** @(CHA-RL1h)@ This specification point has been removed. It was valid up until the single-channel migration.
*** @(CHA-RL1h1)@ This clause has been deleted.
*** @(CHA-RL1h2)@ This specification point has been removed. It was valid up until the single-channel migration.
*** @(CHA-RL1h3)@ This specification point has been removed. It was valid up until the single-channel migration.
*** @(CHA-RL1h4)@ This specification point has been removed. It was valid up until the single-channel migration.
*** @(CHA-RL1h5)@ This specification point has been removed. It was valid up until the single-channel migration.
*** @(CHA-RL1h6)@ This specification point has been removed. It was valid up until the single-channel migration.
** @(CHA-RL1i)@ This specification point has been removed. It was superseded by CHA-RC1f.
*** @(CHA-RL1i1)@ This specification point has been removed. It was made redundant by the introduction of @CHA-RC1@.
* @(CHA-RL2)@ A room must be explicitly detached via the @DETACH@ operation.
** @(CHA-RL2i)@ @[Testable]@ If a room lifecycle operation is already in progress, this operation shall wait until the current operation completes before continuing, subject to @CHA-RL7@.
** @(CHA-RL2a)@ @[Testable]@ If the room status is already @DETACHED@, then this operation is a no-op.
** @(CHA-RL2b)@ @[Testable]@ If the room is in the @RELEASING@ status, the operation shall be rejected with an @ErrorInfo@ with the @RoomIsReleasing@ error code from the "chat-specific error codes":#error-codes.
** @(CHA-RL2c)@ @[Testable]@ If the room is in the @RELEASED@ status, the operation shall be rejected with an @ErrorInfo@ with the @RoomIsReleased@ error code from the "chat-specific error codes":#error-codes.
** @(CHA-RL2d)@ @[Testable]@ If the room is in the @FAILED@ status, the operation shall be rejected with an @ErrorInfo@ with @RoomInFailedState@ error code from the "chat-specific error codes":#error-codes.
** @(CHA-RL2j)@ @[Testable]@ Notwithstanding the above points, when the detachment operation begins, the room shall be transitioned to the @DETACHING@ status.
** @(CHA-RL2k)@ @[Testable]@ Following the @CHA-RL2j@ transition, the client shall initiate and await the detachment of the realtime channel.
*** @(CHA-RL2k1)@ @[Testable]@ If the detachment is successful, the room status shall be transitioned to @DETACHED@, and the @isExplicitlyDetached@ flag set to @true@.
*** @(CHA-RL2k2)@ @[Testable]@ If the detachment is unsuccessful (i.e. @channel.detach()@ throws an error), the detach error is the @ErrorInfo@ from the underlying channel operation. The current channel state shall be used to determine the new room status, which will be enacted, accompanied by the detach error.
*** @(CHA-RL2k3)@ @[Testable]@ If the detachment is unsuccessful (i.e. @channel.detach()@ throws an error), the detach error will be thrown as the result of the room @detach()@ operation.
** @(CHA-RL2e)@ This specification point has been removed. It was valid up until the single-channel migration.
** @(CHA-RL2f)@ This specification point has been removed. It was valid up until the single-channel migration.
** @(CHA-RL2g)@ This specification point has been removed. It was valid up until the single-channel migration.
** @(CHA-RL2h)@ This specification point has been removed. It was valid up until the single-channel migration.
*** @(CHA-RL2h1)@ This specification point has been removed. It was valid up until the single-channel migration.
*** @(CHA-RL2h2)@ This specification point has been removed. It was valid up until the single-channel migration.
*** @(CHA-RL2h3)@ This specification point has been removed. It was valid up until the single-channel migration.
* @(CHA-RL3)@ A room must be explicitly released via the @RELEASE@ operation. This operation is not performed directly on a Room object by the client, but is described here.
** @(CHA-RL3k)@ @[Testable]@ If a room lifecycle operation is already in progress, this operation shall wait until the current operation completes before continuing, subject to @CHA-RL7@.
** @(CHA-RL3a)@ @[Testable]@ If the room is already in the @RELEASED@ status, this operation is no-op.
** @(CHA-RL3b)@ @[Testable]@ If the room is in the @DETACHED@ status, then the room is immediately transitioned to @RELEASED@ and the operation succeeds.
** @(CHA-RL3j)@ @[Testable]@ If the room is in the @INITIALIZED@ status, then the room is immediately transitioned to @RELEASED@ and the operation succeeds.
** @(CHA-RL3c)@ This specification point has been removed.
** @(CHA-RL3i)@ This specification point has been removed.
** @(CHA-RL3m)@ @[Testable]@ When the release operation commences, the room will transition into the @RELEASING@ status.
** @(CHA-RL3n)@ After @CHA-RL3m@, the room enters a detach loop.
*** @(CHA-RL3n1)@ @[Testable]@ If the channel state is @FAILED@, the client shall immediately breaks from the loop.
*** @(CHA-RL3n2)@ @[Testable]@ The client shall initiate and await a @channel.detach()@ operation. If this operation succeeds, the client shall exit the loop.
*** @(CHA-RL3n3)@ @[Testable]@ If the @channel.detach()@ operation fails, and the realtime channel state is @FAILED@ (checked after the failure), the loop shall terminate.
*** @(CHA-RL3n4)@ @[Testable]@ If the @channel.detach()@ operation fails otherwise, the client shall wait a short time (250ms) and restart the loop from @CHA-RL3n1@.
** @(CHA-RL3o)@ @[Testable]@ Upon operation completion, the room status shall be transitioned to @RELEASED@.
** @(CHA-RL3h)@ @[Testable]@ Upon operation completion, the underlying Realtime Channels are released from the core SDK prevent leakage.
** @(CHA-RL3l)@ This specification point has been removed. It was valid up until the single-channel migration.
** @(CHA-RL3d)@ This specification point has been removed. It was valid up until the single-channel migration.
** @(CHA-RL3e)@ This specification point has been removed. It was valid up until the single-channel migration.
** @(CHA-RL3f)@ This specification point has been removed. It was valid up until the single-channel migration.
** @(CHA-RL3g)@ This specification point has been removed. It was valid up until the single-channel migration.
* @(CHA-RL7)@ Room lifecycle operations are atomic and exclusive operations: one operation must complete (whether that's failure or success) before the next one may begin.
** @(CHA-RL7a)@ @[Testable]@ Room lifecycle operations have a precedence. If multiple operations are scheduled to run, they run in the following order:
*** @(CHA-RL7a1)@ This specification point has been removed. It was valid up until the single-channel migration.
*** @(CHA-RL7a2)@ The @RELEASE@ operation.
*** @(CHA-RL7a3)@ The @ATTACH@ and @DETACH@ operations have equal precedence.
* @(CHA-RL9)@ Many operations in the Chat SDK will still attempt to proceed if the room is in an @ATTACHING@ status. However, their ability to proceed will depend on the subsequent status that the room takes. This specification point is defined here to avoid unnecessary repetition. It is primarily testable via the points that refer to it.
** @(CHA-RL9a)@ @[Testable]@ When the room status is @ATTACHING@ at the point of operation commencement, the caller will subscribe a one-time listener to the room status.
** @(CHA-RL9b)@ @[Testable]@ If the next room status received by the caller is @ATTACHED@, the operation shall proceed as normal.
** @(CHA-RL9c)@ @[Testable]@ If the next room status received is any other value, the operation must throw an error. The @ErrorInfo@ shall have the @RoomInInvalidState@ error code from the "chat-specific error codes":#error-codes, with a status code of @500@. The @cause@ field must contain any error associated with the room status change, if present.
** @(CHA-RL9d)@ @[Testable]@ Once execution has resumed, the client MAY check the room status again, to handle spurious changes or race conditions.
* @(CHA-RL10)@ This specification point has been removed. It was valid up until the single-channel migration.
* @(CHA-RL5)@ This specification point has been removed. It was valid up until the single-channel migration.
** @(CHA-RL5a)@ This specification point has been removed. It was valid up until the single-channel migration.
*** @(CHA-RL5a1)@ This specification point has been removed. It was valid up until the single-channel migration.
** @(CHA-RL5b)@ This specification point has been removed. It was valid up until the single-channel migration.
** @(CHA-RL5c)@ This specification point has been removed. It was valid up until the single-channel migration.
** @(CHA-RL5d)@ This specification point has been removed. It was valid up until the single-channel migration.
** @(CHA-RL5e)@ This specification point has been removed. It was valid up until the single-channel migration.
** @(CHA-RL5f)@ This specification point has been removed. It was valid up until the single-channel migration.
*** @(CHA-RL5f1)@ This specification point has been removed. It was valid up until the single-channel migration.
*** @(CHA-RL5f2)@ This specification point has been removed. It was valid up until the single-channel migration.
*** @(CHA-RL5f3)@ This specification point has been removed. It was valid up until the single-channel migration.
* @(CHA-RL6)@ This specification point has been removed. It was superseded by @CHA-RL8@.
* @(CHA-RL6a)@ This specification point has been removed. It was superseded by @CHA-RL8@.
* @(CHA-RL8)@ This specification point has been removed. It was a duplicate of @CHA-RS3@.

h4(#rooms-lifecycle-monitoring). Room Lifecycle Monitoring

As well as user-initiated operations, the room must monitor its underlying resources and act accordingly. This includes handling disconnections from the server, as well as discontinuities in channel messages.

* @(CHA-RL4)@ This specification point has been removed. It was valid up until the single-channel migration.
** @(CHA-RL4a)@ This specification point has been removed. It was valid up until the single-channel migration.
*** @(CHA-RL4a1)@ This specification point has been removed. It was valid up until the single-channel migration.
*** @(CHA-RL4a2)@ This specification point has been removed. It was valid up until the single-channel migration.
*** @(CHA-RL4a3)@ This specification point has been removed. It was valid up until the single-channel migration.
*** @(CHA-RL4a4)@ This specification point has been removed. It was valid up until the single-channel migration.
** @(CHA-RL4b)@ This specification point has been removed. It was valid up until the single-channel migration.
*** @(CHA-RL4b1)@ This specification point has been removed. It was valid up until the single-channel migration.
*** @(CHA-RL4b2)@ This specification point has been removed. It was valid up until the single-channel migration.
*** @(CHA-RL4b3)@ This specification point has been removed. It was valid up until the single-channel migration.
*** @(CHA-RL4b4)@ This specification point has been removed. It was valid up until the single-channel migration.
*** @(CHA-RL4b5)@ This specification point has been removed. It was valid up until the single-channel migration.
*** @(CHA-RL4b6)@ This specification point has been removed. It was valid up until the single-channel migration.
*** @(CHA-RL4b7)@ This specification point has been removed. It was valid up until the single-channel migration.
*** @(CHA-RL4b8)@ This specification point has been removed. It was valid up until the single-channel migration.
*** @(CHA-RL4b9)@ This specification point has been removed. It was valid up until the single-channel migration.
*** @(CHA-RL4b10)@ This specification point has been removed. It was valid up until the single-channel migration.
* @(CHA-RL11)@ The room must monitor the underlying realtime channel state, and update the room status accordingly.
** @(CHA-RL11a)@ @[Testable]@ The room will subscribe to channel state changes on the underlying realtime channel.
** @(CHA-RL11b)@ @[Testable]@ If a room lifecycle operation is in progress and a channel state change is received, the operation is no-op.
** @(CHA-RL11c)@ @[Testable]@ If a room lifecycle operation is not in progress and a channel state change is received, the operation is no-op, the room status is set according to the underlying channel state, along with any associated error.
* @(CHA-RL12)@ The room must monitor the underlying realtime channel state and emit notifications of discontinuity.
** @(CHA-RL12a)@ @[Testable]@ The room will subscribe to channel state changes on the underlying realtime channel, specifically @UPDATE@ and @ATTACHED@.
** @(CHA-RL12b)@ @[Testable]@ If a channel state change is received, and the @resumed@ flag is @false@, and the @hasAttachedOnce@ property is @true@ and the @isExplicitlyDetached@ flag is @false@, then a discontinuity event will be emitted, using an @ErrorInfo@ with the @RoomDiscontinuity@ code from the "error codes":#error-codes and the error from the @ChannelStateChange@ as the cause.
* @(CHA-RL15)@ The room must allow users to subscribe to discontinuity events.
** @(CHA-RL15a)@ @[Testable]@ The room must allow users to supply a listener that shall receive events when a room discontinuity is detected.
** @(CHA-RL15b)@ @[Testable]@ Users must be able to unsubscribe a previously added listener, after which point events shall no longer be received.
** @(CHA-RL15c)@ @[Testable]@ Attempting to unsubscribe a previously removed listener shall result in a no-op.

h2(#room-configuration). Room Configuration

Each chat room can be configured individually, allowing options to be passed as to which features are enabled and also feature-specific settings.

* @(CHA-RC1)@ Chat Rooms are singleton objects with respect to the Chat Client on which they are created.
** @(CHA-RC1a)@ This specification point has been removed. It was superseded by CHA-RC1f.
** @(CHA-RC1f)@ @[Testable]@ Requesting a room from the Chat Client shall return a future, that eventually resolves to an instance of a room with the provided id and (optional) options.
*** @(CHA-RC1f1)@ @[Testable]@ If the room id exists in the room map, but the room has been requested with different options, then an @ErrorInfo@ with the @BadRequest@ error code from the "chat-specific error codes":#error-codes and a @statusCode@ of 400 shall be thrown.
*** @(CHA-RC1f2)@ @[Testable]@ If the room id exists in the room map, and it is requested with the same options, then the same instance of the room must be reused.
*** @(CHA-RC1f3)@ @[Testable]@ If no @CHA-RC1g@ release operation is in progress, a new room instance shall be created, added to the room map and returned as the future value.
*** @(CHA-RC1f4)@ @[Testable]@ If a @CHA-RC1g@ release operation is in progress, the entry shall be added to the room map, but the new room instance must not be created until the release operation has resolved. The future shall then subsequently resolve with the new room value.
*** @(CHA-RC1f5)@ In relation to @CHA-RC1f4@, we recommend storing a future in the room map.
*** @(CHA-RC1f6)@ It should be noted that the "get" operations in this section are interruptible by a @CHA-RC1g@ release call.
** @(CHA-RC1b)@ This specification point has been removed, it was superseded by @CHA-RC1f2@
** @(CHA-RC1c)@ This specification point has been removed, it was superseded by @CHA-RC1f3@
** @(CHA-RC1d)@ This specification point has been removed.
*** @(CHA-RC1d1)@ This specification point has been removed.
** @(CHA-RC1e)@ This specification point has been removed.
** @(CHA-RC1g)@ A room may be @released@, which causes it to be disposed of and eligible for garbage collection.
*** @(CHA-RC1g1)@ The release operation returns a future that shall resolve when the operation completes. 
*** @(CHA-RC1g2)@ @[Testable]@ If the room does not exist in the room map, and no release operation is in progress, this operation is no-op.
*** @(CHA-RC1g3)@ @[Testable]@ If the room does not exist in the room map, and a release operation is already in progress, then the associated future will be returned.
*** @(CHA-RC1g4)@ @[Testable]@ If a release operation is already in progress, any pending @CHA-RC1f@ future shall be rejected / throw an error. The error must use the @RoomReleasedBeforeOperationCompleted@ error code from the "chat-specific error codes":#error-codes and a @statusCode@ of 400. The room shall be removed from the room map and the operation must return the future associated with the previous operation.
*** @(CHA-RC1g5)@ @[Testable]@ The room is removed from the room map and a @CHA-RL3@ release operation is initiated for the room object. A future is returned which resolves when the release operation completes.
* @(CHA-RC2)@ Chat rooms are configurable, so as to enable or disable certain features. When requesting a room, options as to which features should be enabled, and the configuration they should take, must be provided (@RoomOptions@).
** @(CHA-RC2a)@ @[Testable]@ If a room is requested with invalid configuration, for example: a negative typing timeout, an @ErrorInfo@ with code @40001@ must be thrown.
** @(CHA-RC2c)@ This specification point has been removed. It was valid up until the single-channel migration.
** @(CHA-RC2b)@ This specification point has been removed. It was valid up until the single-channel migration.
** @(CHA-RC2d)@ This specification point has been removed. It was valid up until the single-channel migration.
** @(CHA-RC2e)@ This specification point has been removed. It was valid up until the single-channel migration.
** @(CHA-RC2f)@ This specification point has been removed. It was valid up until the single-channel migration.
* @(CHA-RC3)@ Multiple chat features share one realtime channel (for example, presence and messages). Each feature may have different channel modes/options that need to be applied.
** @(CHA-RC3a)@ @[Testable]@ When retrieving a channel via @channels.get()@, features must merge together their respective options/modes and pass the merged result to the call to @channels.get()@.
** @(CHA-RC3b)@ Note: SDKs shall not rely on updating the value progressively via feature spec item @RTS3c@ - as this has been soft-deprecated and may be removed in the future.
** @(CHA-RC3c)@ @[Testable]@ Unless explicitly stated otherwise, the channel used shall be @<roomId>::$chat@. So if your roomId is @foo@, the channel will be @foo::$chat@.
* @(CHA-RC4)@ Users may provide room options to the @rooms.get()@ call to control the behaviour of the room.
** @(CHA-RC4a)@ @[Testable]@ Where room options have not been provided, the client shall provide defaults.
** @(CHA-RC4b)@ @[Testable]@ Where a partial room options have been provided, the client shall deep-merge the provided values with the defaults.
* @(CHA-RC5)@ @[Testable]@ All chat feature properties (e.g. @room.messages@) are enabled by default. The specific behaviour of each feature is controlled by its respective room options.

h2(#messages). Messages

Messages are the quintessential component of a chat room - the purpose of chat is for users to talk to each other!

Broadly speaking, messages are published via REST calls to the Chat HTTP API and message events are received in Realtime over a corresponding realtime channel.
@Messages@ shall be exposed to consumers via the @messages@ property of a @Room@.

* @(CHA-M1)@ This specification point has been removed. It was valid up until the single-channel migration.
* @(CHA-M2)@ A @Message@ corresponds to a single message in a chat room. This is analogous to a single user-specified message on an Ably channel (NOTE: **not** a @ProtocolMessage@).
<div class=deprecated>
** @(CHA-M2a)@ @[Testable]@ @(deprecated)@ A @Message@ is considered before another @Message@ in the global order if the @timeserial@ of the corresponding realtime channel message comes first.
** @(CHA-M2b)@ @[Testable]@ @(deprecated)@ A @Message@ is considered after another @Message@ in the global order if the @timeserial@ of the corresponding realtime channel message comes second.
** @(CHA-M2c)@ @[Testable]@ @(deprecated)@ A @Message@ is considered to be equal to another @Message@ if they have the same timeserial.
</div>
** @(CHA-M2d)@ @[Testable]@ A @Message@ contains a unique, immutable @serial@, which is a lexicographically sortable string. Global message order can be determined by a simple string comparison of the serials. The SDK must not attempt to parse timeserial strings.
** @(CHA-M2e)@ @[Testable]@ In global ordering, a @Message@ is considered to occur before another @Message@ if the @serial@ of the first @Message@ is before the latter when lexicographically sorted.
** @(CHA-M2f)@ @[Testable]@ In global ordering, a @Message@ is considered after another @Message@ if the @serial@ of the first @Message@ is after the latter when lexicographically sorted.
** @(CHA-M2g)@ @[Testable]@ Two @Messages@ are considered to be the same if they have the same @serial@, that is to say, both @Serial@ strings are identical.
* @(CHA-M10)@ A @Message@ can be modified by applying a new @action@ to it, such as an update or delete. Applying an @action@ must generate a new @Message@ instance with the same @serial@ and an updated @version@.
** @(CHA-M10a)@ @[Testable]@ The @version@ of a @Message@ is a lexicographically sortable, unique identifier for each version of the @Message@.
** @(CHA-M10b)@ This clause has been deleted.
** @(CHA-M10c)@ This clause has been deleted.
** @(CHA-M10d)@ This clause has been deleted.
** @(CHA-M10e)@ @[Testable]@ To sort @Message@ @versions@ of the same @Message@ (instances with the same @serial@) in global order, sort @Message@ instances lexicographically by their @version@ property.
*** @(CHA-M10e1)@ @[Testable]@ Two @Message@ instances of the same @serial@ are considered the same version if they have the same @version@ property.
*** @(CHA-M10e2)@ @[Testable]@ Among @Message@ instances of the same @serial@, the one with a lexicographically higher @version@ is newer.
*** @(CHA-M10e3)@ @[Testable]@ Among @Message@ instances of the same @serial@, the one with a lexicographically lower @version@ is older.
** @(CHA-M10f) @[Testable]@ A message version may be deemed older than another via the @isOlderVersionOf@ convenience method. This method returns true IFF the two messages have the same serial, and the given message is "older" by @(CHA-M10e3)@.
** @(CHA-M10g) @[Testable]@ A message version may be deemed newer than another via the @isNewerVersionOf@ convenience method. This method returns true IFF the two messages have the same serial, and the given message is "newer" by @(CHA-M10e2)@.
** @(CHA-M10h) @[Testable]@ A message version may be deemed to be the same as another via the @isSameVersionAs@ convenience method. This method returns true IFF the two messages have the same serial, and are the same version by @(CHA-M10e1)@.
* @(CHA-M3)@ A client must be able to send a message to a room.
** @(CHA-M3f)@ @[Testable]@ A client may send a message via the Chat REST API.
** @(CHA-M3a)@ @[Testable]@ When a message is sent successfully via the Chat REST API, the caller shall receive a struct representing the "@Message@":#chat-structs-message in response, as if it were received via Realtime event.
** @(CHA-M3b)@ @[Testable]@ A message may be sent via the Chat REST API without @metadata@ or @headers@. When these are not specified by the user, they must be omitted from the REST payload.
** @(CHA-M3c)@ This clause has been deleted.
** @(CHA-M3d)@ This clause has been deleted.
** @(CHA-M3e)@ @[Testable]@ If an error is returned from the REST API, its @ErrorInfo@ representation shall be thrown as the result of the @send@ call.
* @(CHA-M8)@ A client must be able to update a message in a room.
** @(CHA-M8a)@ @[Testable]@ A client may update a message via the Chat REST API by calling the @update@ method.
** @(CHA-M8b)@ @[Testable]@ When a message is updated successfully via the REST API, the caller shall receive a struct representing the "@Message@":#chat-structs-message-v2 in response, as if it were received via Realtime event.
** @(CHA-M8c)@ @[Testable]@ An update operation has PUT semantics. If a field is not specified in the update, it is assumed to be removed.
** @(CHA-M8d)@ @[Testable]@ If an error is returned from the REST API, its @ErrorInfo@ representation must be thrown as the result of the @update@ call.
* @(CHA-M9)@ A client must be able to delete a message in a room.
** @(CHA-M9a)@ @[Testable]@ A client may delete a message via the Chat REST API by calling the @delete@ method.
** @(CHA-M9b)@ @[Testable]@ When a message is deleted successfully via the REST API, the caller shall receive a struct representing the "@Message@":#chat-structs-message-v2 in response, as if it were received via Realtime event.
** @(CHA-M9c)@ @[Testable]@ If an error is returned from the REST API, its @ErrorInfo@ representation must be thrown as the result of the @delete@ call.
* @(CHA-M4)@ Messages can be received via a subscription in realtime.
** @(CHA-M4a)@ @[Testable]@ A subscription can be registered to receive incoming messages. Adding a subscription has no side effects on the status of the room or the underlying realtime channel.
** @(CHA-M4b)@ @[Testable]@ A subscription can de-registered from incoming messages. Removing a subscription has no side effects on the status of the room or the underlying realtime channel.

<div class=deprecated>
** @(CHA-M4c)@ @[Testable]@ @(deprecated)@ When a realtime message with @name@ set to @message.created@  is received, it is translated into a message event, which contains a @type@ field with the event type as well as a @message@ field containing the "@Message Struct@":#chat-structs-message. This event is then broadcast to all subscribers.
</div>

** @(CHA-M4l)@ When a realtime message with the @name@ field set to @chat.message@ is received, it shall be translated into a message event based on its @action@. This message event contains a @type@ field with the event type as well as a @message@ field containing the "@Message Struct@":#chat-structs-message-v2. This event shall then broadcast to all subscribers.
** @(CHA-M4d)@ @[Testable]@ If a realtime message with an unknown @name@ is received, the SDK shall silently discard the message, though it may log at @DEBUG@ or @TRACE@ level.
** @(CHA-M4m)@ @[Testable]@ The @action@ field of the realtime message determines the type of chat message event that is emitted, based on the following rules.
*** @(CHA-M4m1)@ @[Testable]@ If @action@ is set to @MESSAGE_CREATE@, then an event with @type@ set to @message.created@ shall be emitted.
*** @(CHA-M4m2)@ @[Testable]@ If @action@ is set to @MESSAGE_UPDATE@, then an event with @type@ set to @message.updated@ shall be emitted.
*** @(CHA-M4m3)@ @[Testable]@ If @action@ is set to @MESSAGE_DELETE@, then an event with @type@ set to @message.deleted@ shall be emitted.
*** @(CHA-M4m4)@ @[Testable]@ If a realtime message with an unknown @action@ is received, the SDK shall silently discard the message, though it may log at @DEBUG@ or @TRACE@ level.
** @(CHA-M5k)@ @[Testable]@ Incoming realtime events that are malformed (unknown field should be ignored) shall not be emitted to subscribers.
* @(CHA-M5)@ For a given subscription, messages prior to the point of subscription can be retrieved in a history-like request. Note that this is the point in the message flow @(subscription point)@ at which the subscription was made, NOT the channel attachment point.
** @(CHA-M5a)@ @[Testable]@ If a subscription is added when the underlying realtime channel is @ATTACHED@, then the @subscription point@ is the current @channelSerial@ of the realtime channel.
** @(CHA-M5b)@ @[Testable]@ If a subscription is added when the underlying realtime channel is in any other state, then its @subscription point@ becomes the @attachSerial@ at the the point of channel attachment.
** @(CHA-M5c)@ @[Testable]@ If a channel leaves the @ATTACHED@ state and then re-enters @ATTACHED@ with @resumed=false@, then it must be assumed that messages have been missed. The @subscription point@ of any subscribers must be reset to the @attachSerial@.
** @(CHA-M5d)@ @[Testable]@ If a channel @UPDATE@ event is received and @resumed=false@, then it must be assumed that messages have been missed. The @subscription point@ of any subscribers must be reset to the @attachSerial@.
** @(CHA-M5e)@ Each subscription shall expose a method or callback that allows for messages to be queried. These messages are queried via the "REST API"#rest-fetching-messages.
** @(CHA-M5f)@ @[Testable]@ This method must accept any of the standard history query options, except for @direction@, which must always be @backwards@.
** @(CHA-M5g)@ @[Testable]@ The subscribers @subscription point@ must be additionally specified (internally, by us) in the @fromSerial@ query parameter.
** @(CHA-M5h)@ @[Testable]@ The method must return a standard @PaginatedResult@ , which can be further inspected to paginate across results.
** @(CHA-M5i)@ @[Testable]@ If the REST API returns an error, then the method must throw its @ErrorInfo@ representation.
** @(CHA-M5j)@ This specification point has been removed.
* @(CHA-M6)@ Messages should be queryable from a paginated REST API.
* @(CHA-M6a)@ @[Testable]@ A method must be exposed that accepts the standard Ably REST API query parameters. It shall call the "REST API"#rest-fetching-messages and return a @PaginatedResult@ containing messages, which can then be paginated through. Each message must be represented by the standard @Message@ object.
* @(CHA-M6b)@ @[Testable]@ If the REST API returns an error, then the method must throw its @ErrorInfo@ representation.
* @(CHA-M7)@ This specification point has been removed. It was valid up until the single-channel migration.

h2(#reactions). Ephemeral Room Reactions

Ephemeral room reactions are one-time events that are sent to the room, such as thumbs-up or heart emojis. They are supposed to capture the current emotions in the room (e.g. everyone spamming the :tada: emoji when a team scores the winning goal).

They are ephemeral as we do not currently store these messages do not support server-authoritative counting.

All ephemeral room reactions are handled over the Realtime connection.

@Reactions@ shall be exposed to consumers via the @reactions@ property of a @Room@.

* @(CHA-ER1)@ This specification point has been removed. It was valid up until the single-channel migration.
* @(CHA-ER2)@ A @Reaction@ corresponds to a single reaction in a chat room. This is analogous to a single user-specified message on an Ably channel (NOTE: **not** a @ProtocolMessage@).
* @(CHA-ER3)@ Ephemeral room reactions are sent to Ably via the Realtime connection via a @send@ method.
** @(CHA-ER3a)@ This specification point was removed. It was valid until the single-channel migration.
** @(CHA-ER3d)@ @[Testable]@ Reactions are sent on the channel using an @ephemeral@ message in "this format":#realtime-room-reactions.
** @(CHA-ER3b)@ This clause has been deleted.
** @(CHA-ER3c)@ This clause has been deleted.
* @(CHA-ER4)@ A user may subscribe to reaction events in Realtime.
** @(CHA-ER4a)@ @[Testable]@ A user may provide a listener to subscribe to reaction events. This operation must have no side-effects in relation to room or underlying status. When a "realtime message":#realtime-room-reactions with name @roomReaction@ is received, this message is converted into a "reaction object":#chat-structs-ephemeral-reactions and emitted to subscribers.
** @(CHA-ER4b)@ @[Testable]@ A user may unsubscribe a registered listener. This operation must have no side-effects in relation to room or underlying status. Once unsubscribed, subsequent reaction events must not be emitted to this listener.
** @(CHA-ER4c)@ @[Testable]@ Realtime events with an unknown @name@ shall be silently discarded.
** @(CHA-ER4d)@ @[Testable]@ Realtime events that are malformed (unknown fields should be ignored) shall not be emitted to listeners.
* @(CHA-ER5)@ This specification point has been removed. It was valid up until the single-channel migration.

h2(#presence). Online Status (Presence)

Presence allows chat room users to indicate to others that they're online, as well as other information including their profile picture URL etc.

@Presence@ shall be exposed to consumers via the @presence@ property of a @Room@.

* @(CHA-PR1)@ This specification point has been removed. It was valid up until the single-channel migration.
* @(CHA-PR2)@ The presence payload for Chat is opinionated, so that we may add or change fields later without needing to consider how customers are using presence.
** @(CHA-PR2a)@ @[Testable]@ The presence data format is a JSON object as described below. Customers may specify content of an arbitrary type to be placed in the @userCustomData@ field.

<pre>
  {
    "userCustomData": {
      // Some user specified type, does not have to be object.
    }
  }
</pre>

* @(CHA-PR3)@ Users may enter presence. The behaviour depends on the current room status, as presence operations in a Realtime Client cause implicit attaches.
** @(CHA-PR3a)@ @[Testable]@ Users may choose to enter presence, optionally providing custom data to enter with. The overall presence data must retain the format specified in @CHA-PR2@.
** @(CHA-PR3b)@ This clause has been replaced by @CHA-PR3c - CHA-PR3g@.
** @(CHA-PR3c)@ This specification point has been removed.
*** @(CHA-PR3c1) This specification point has been removed.
*** @(CHA-PR3c2)@ This specification point has been removed.
** @(CHA-PR3d)@ @[Testable]@ If the room status is @Attaching@, then the operation shall invoke a @CHA-RL9@ pending room status operation and wait for it to complete. If this operation fails, then the error from @CHA-RL9@ must be raised. If this succeeds (i.e the room becomes @ATTACHED@), the library must invoke the underlying @presence.enter()@ call.
** @(CHA-PR3h)@ @[Testable]@ If the room status is anything other than @Attached@ or @Attaching@, an @ErrorInfo@ using the @RoomInInvalidState@ error code from the "chat-specific error codes":#error-codes with a status code of @400@ must be thrown. The message shall explain that attach must be called first.
** @(CHA-PR3e)@ @[Testable]@ If the room status is @Attached@, then the @enter@ call will invoke the underlying @presence.enter()@ call.
** @(CHA-PR3f)@ This specification point has been removed. It was superseded by @CHA-PR3h@.
** @(CHA-PR3g)@ This specification point has been removed. It was superseded by @CHA-PR3h@.
* @(CHA-PR10)@ Users may update their presence data. The behaviour depends on the current room status, as presence operations in a Realtime Client cause implicit attaches.
** @(CHA-PR10a)@ @[Testable]@ Users may choose to update their presence data, optionally providing custom data to update with. The overall presence data must retain the format specified in @CHA-PR2@.
** @(CHA-PR10b)@ This clause has been replaced by @CHA-PR10c - CHA-PR10g@.
** @(CHA-PR10c)@ This specification point has been removed.
*** @(CHA-PR10c1)@ This specification point has been removed.
*** @(CHA-PR10c2)@ This specification point has been removed.
** @(CHA-PR10d)@ @[Testable]@ If the room status is @Attaching@, then the operation shall invoke a @CHA-RL9@ pending room status operation and wait for it to complete. If this operation fails, then the error from @CHA-RL9@ must be raised. If this succeeds (i.e the room becomes @ATTACHED@), the library must invoke the underlying @presence.update()@ call.
** @(CHA-PR10h)@ @[Testable]@ If the room status is anything other than @Attached@ or @Attaching@, an @ErrorInfo@ using the @RoomInInvalidState@ error code from the "chat-specific error codes":#error-codes with a status code of @400@ must be thrown. The message shall explain that attach must be called first.
** @(CHA-PR10e)@ @[Testable]@ If the room status is @Attached@, then the @update@ call will invoke the underlying @presence.enter()@ call.
** @(CHA-PR10f)@ This specification point has been removed. It was superseded by @CHA-PR10h@.
** @(CHA-PR10g)@ This specification point has been removed. It was superseded by @CHA-PR10h@.
* @(CHA-PR4)@ Users may leave presence.
** @(CHA-PR4a)@ @[Testable]@ Users may choose to leave presence, which results in them being removed from the Realtime presence set.
* @(CHA-PR5)@ @[Testable]@ It must be possible to query if a given clientId is in the presence set.
* @(CHA-PR6)@ @[Testable]@ It must be possible to retrieve all the "@Members":#chat-structs-presence-member of the presence set. The behaviour depends on the current room status, as presence operations in a Realtime Client cause implicit attaches.
** @(CHA-PR6a)@ This clause has been replaced by @CHA-PR6b - CHA-PR6f@.
** @(CHA-PR6b)@ This specification point has been removed.
*** @(CHA-PR6b1)@ This specification point has been removed.
*** @(CHA-PR6b2)@ This specification point has been removed.
** @(CHA-PR6c)@ @[Testable]@ If the room status is @Attaching@, then the operation shall invoke a @CHA-RL9@ pending room status operation and wait for it to complete. If this operation fails, then the error from @CHA-RL9@ must be raised. If this succeeds (i.e the room becomes @ATTACHED@), the library must invoke the underlying @presence.get()@ call.
** @(CHA-PR6h)@ @[Testable]@ If the room status is anything other than @Attached@ or @Attaching@, an @ErrorInfo@ using the @RoomInInvalidState@ error code from the "chat-specific error codes":#error-codes with a status code of @400@ must be thrown. The message shall explain that attach must be called first.
** @(CHA-PR6d)@ @[Testable]@ If the room status is @Attached@, then the @get@ call will invoke the underlying @presence.get()@ call.
** @(CHA-PR6e)@ This specification point has been removed. It was superseded by @CHA-PR6h@.
** @(CHA-PR6f)@ This specification point has been removed. It was superseded by @CHA-PR6h@.
* @(CHA-PR7)@ Users may subscribe to presence events.
** @(CHA-PR7a)@ @[Testable]@ Users may provide a listener to subscribe to all "presence events":#chat-structs-presence-event in a room.
** @(CHA-PR7b)@ @[Testable]@ Users may provide a listener and a list of selected "presence events":#chat-structs-presence-event, to subscribe to just those events in a room.
** @(CHA-PR7c)@ @[Testable]@ A subscription to presence may be removed, after which it shall receive no further events.
* @(CHA-PR8)@ This specification point has been removed. It was valid up until the single-channel migration.
* @(CHA-PR9)@ Users may configure their presence options via the @RoomOptions@ provided at room configuration time.
** @(CHA-PR9a)@ This specification point has been removed. It was valid up until the single-channel migration and was replaced by @CHA-PR9c@.
** @(CHA-PR9b)@ This specification point has been removed. It was valid up until the single-channel migration and was replaced by @CHA-PR9c@.
** @(CHA-PR9c)@ The option @receivePresenceEvents@ controls whether or not the client should receive presence events.
*** @(CHA-PR9c1)@ @[Testable]@ This option defaults to @true@.
*** @(CHA-PR9c2)@ @[Testable]@ When set to @false@: when getting the channel from the realtime client, if no modes have been explicitly set yet, then the modes shall be initialised to @['PUBLISH', 'SUBSCRIBE', 'PRESENCE']@ (thus omitting @PRESENCE_SUBSCRIBE@).

h2(#typing). Typing Indicators

Typing Indicators allow chat room users to indicate to others that they are typing. This is most common in 1:1 and community chat, where a UI would display somthing like "Alice and Bob are typing..." to users.

This system uses ephemeral non-persisted heartbeat messages. They do not appear in channel history, resume or rewind.

@Typing Indicators@ shall be exposed to consumers via the @typing@ property of a @Room@.

For the purpose of this section, an @ephemeral message@ is understood to mean a regular message where @message.extras.ephemeral@ is set to @true@, i.e "typing-message-format":#realtime-typing-message.

* @(CHA-T1)@ This specification point has been removed. It was replaced by @CHA-RC3c@.
* @(CHA-T2)@ This specification point has been removed. It was replaced by @CHA-T9@.
* @(CHA-T8)@ This specification point has been removed. It was replaced by @CHA-RC3c@.
* @(CHA-T9)@ @[Testable]@ Users must be able to retrieve a list of the currently typing client IDs through a @typing.get()@ method. The list must be a copy of the up-to-date internal list of typing client IDs.
* @(CHA-T15)@ @[Testable]@ Users must be able to provide a listener to subscribe to new typing events that the Chat client emits. This operation must have no side effects on the status of the room or the underlying realtime channel.
* @(CHA-T10)@ @[Testable]@ Users may configure a heartbeat interval (the no-op period for @typing.keystroke@ when the heartbeat timer is set active at @CHA-T4a4@). This configuration is provided at the @RoomOptions.typing.heartbeatThrottleMs@ property, or idiomatic equivalent. The default is 10000ms.
** @(CHA-T10a)@ A grace period shall be set by the client (the grace period on the @CHA-T10@ heartbeat interval when receiving events). The default value shall be set to 2000ms.
*** @(CHA-T10a1)@ This grace period is used to determine how long to wait (since the last recorded received typing event), beyond the heartbeat interval, before removing a client from the typing set. This is used to prevent flickering when a user is typing and stops typing for a short period of time. See @CHA-T13b1@ for a detailed description of how this is used.
* @(CHA-T3)@ This specification point has been removed. It was replaced by @CHA-T10@.
* @(CHA-T4)@ Users may indicate that they have started typing using the @keystroke@ method.
** @(CHA-T4d)@ @[Testable]@ If the channel state is not @ATTACHED@ or @ATTACHING@, the operation shall throw an @ErrorInfo@ with code @40000@.
** @(CHA-T4a)@ If typing is not already in progress (i.e. a heartbeat timer has not been set by the successful publish @CHA-T4a4@ of a @typing.started@ event):
*** @(CHA-T4a1)@ This specification point has been removed. It was replaced by @CHA-T4a3+@.
*** @(CHA-T4a2)@ This specification point has been removed. It was replaced by @CHA-T4a3+@.
*** @(CHA-T4a3)@ @[Testable]@ The client shall publish an ephemeral message to the channel with the @name@ field set to @typing.started@, the format of which is detailed "here":#realtime-typing-message.
*** @(CHA-T4a4)@ @[Testable]@ Upon successful publish, a heartbeat timer shall be set according to the @CHA-T10@ timeout interval.
*** @(CHA-T4a5)@ @[Testable]@ The client must wait for the publish to succeed or fail before returning the result to the caller. If the publish fails, the client must handle this transparently and re-throw the error directly to the caller.
** @(CHA-T4b)@ This specification point has been removed. It was superseded by @CHA-T4c@.
** @(CHA-T4c)@ If typing is already in progress (i.e. a heartbeat timer set according to @CHA-T4a4@ exists and has not expired):
*** @(CHA-T4c1)@ @[Testable]@ The client must not send a @typing.started@ event, instead it shall return a successful no-op to the caller.
* @(CHA-T5)@ Users may explicitly indicate that they have stopped typing using @stop@ method.
** @(CHA-T5a)@ @[Testable]@ If typing is not in progress (i.e. a @CHA-T4a4@ heartbeat timer does not exist or is expired), this operation is a no-op.
** @(CHA-T5b)@ This specification point has been removed.
** @(CHA-T5c)@ @[Testable]@ If the channel state is not @ATTACHED@ or @ATTACHING@, the operation shall throw an @ErrorInfo@ with code @40000@.
** @(CHA-T5d)@ @[Testable]@ The client shall publish an ephemeral message to the channel with the name field set to @typing.stopped@, the format of which is detailed "here":#realtime-typing-message. The client must wait for the publish to succeed or fail before returning the result to the caller.
** @(CHA-T5d1)@ @[Testable]@ The client must wait for the publish to succeed or fail before returning the result to the caller. If the publish fails, the client must handle this transparently and re-throw the error directly to the caller.
** @(CHA-T5e)@ @[Testable]@ On successfully publishing the message in @(CHA-T5d)@, the @CHA-T4a4@ timer shall be unset.
* @(CHA-T6)@ Users may subscribe to typing events - updates to a set of clientIDs that are typing. This operation, like all subscription operations, has no side-effects in relation to room lifecycle.
** @(CHA-T6a)@ @[Testable]@ Users may provide a listener to subscribe to "typing event V2":#chat-structs-typing-event-V2 in a chat room.
** @(CHA-T6b)@ @[Testable]@ A subscription to typing may be removed, after which it shall receive no further events.
** @(CHA-T6c)@ This specification point has been removed, it has been superseded by @CHA-T6d@.
*** @(CHA-T6c1)@ This specification point has been removed, it has been superseded by @CHA-T6d@.
*** @(CHA-T6c2)@ This specification point has been removed, it has been superseded by @CHA-T6d@.
* @(CHA-T7)@ This specification point has been removed. It was valid up until the single-channel migration.
* @(CHA-T13)@ When a typing event (@typing.start@ or @typing.stop@) is received from the realtime client, the Chat client shall emit appropriate events to all registered listeners @(CHA-T15)@.
** @(CHA-T13a)@ @[Testable]@ Typing events received from the server must have a valid @clientId@ and must not be malformed, i.e they must conform to the expected "payload":#realtime-typing-message (unknown fields should be ignored). Invalid events shall not be handled or emitted to any registered listeners (@CHA-T15@).
** @(CHA-T13b)@ @[Testable]@ When a typing event is received on the realtime client:
*** @(CHA-T13b1)@ @[Testable]@ If the event represents a new client typing, then the Chat client shall add the typers @clientId@ to the typing set and a emit the updated set, via a new "typing event":#chat-structs-typing-event-V2 , to any listeners. It shall also begin a timer with a timeout period that is the sum of the @CHA-T10@ heartbeat interval and the @CHA-T10a@ graсe period.
*** @(CHA-T13b2)@ @[Testable]@ Each additional @typing.started@ event from the same client shall reset the @(CHA-T13b1)@ timer for that client.
*** @(CHA-T13b3)@ @[Testable]@ If the @(CHA-T13b1)@ timer expires, the client shall remove the @clientId@ from the typing set and emit a typing stopped event for the given client to all registered listeners (@CHA-T15@).
*** @(CHA-T13b4)@ @[Testable]@ If the event represents a client that has stopped typing, the Chat client shall remove the @clientId@ from the typing set and emit a typing stopped event to any registered listeners (@CHA-T15@). It shall also cancel the @(CHA-T13b1)@ timer for the given typing client.
*** @(CHA-T13b5)@ @[Testable]@ If the event represents a client that has stopped typing, but the @clientId@ for that client is not present in the typing set, then no stop typing event shall be emitted to any registered listeners (@CHA-T15@).
* @(CHA-T14)@ @[Testable]@ Multiple asynchronous calls to keystroke/stop typing must eventually converge to a consistent state.
** @(CHA-T14a)@ @[Testable]@ When a call to @keystroke@ or @stop@ is made, it should attempt to acquire a mutex lock.
** @(CHA-T14b)@ @[Testable]@ Once the lock is acquired, if another call is made to either function, the second call shall be queued and wait until it can acquire the lock before executing.
*** @(CHA-T14b1)@ @[Testable]@ During this time, each new subsequent call to either function shall abort the previously queued call, this should be registered as a successful no-op to the caller. In doing so, there shall only ever be one pending call while the mutex is held, thus the most recent call shall "win" and execute once the mutex is released.
*** @(CHA-T14b2)@ @[Testable]@ If an error occurs while the lock is held, the mutex shall be released and the error shall be thrown to the caller.
* @(CHA-T7)@ This specification point has been removed, it was valid up until the single-channel migration.

h2(#occupancy). Occupancy

Occupancy allows chat room users to find out how many people are currently online in the Chat Room, which is useful for showing statistics such as the viewer count in a livestream. It allows this to happen without
the overhead of having everyone in presence.

@Occupancy@ shall be exposed to consumers via the @occupancy@ property of a @Room@.

* @(CHA-O1)@ This specification point has been removed. It was valid up until the single-channel migration.
* @(CHA-O2)@ The occupancy event format is shown "here":#chat-structs-occupancy-event
* @(CHA-O3)@ @[Testable]@ Users can request an instantaneous occupancy check via the REST API. The request is detailed "here":#rest-occupancy-request, with the response format being a simple "occupancy event":#chat-structs-occupancy-event
* @(CHA-O4)@ Users can subscribe to in-band, realtime occupancy updates.
** @(CHA-O4a)@ @[Testable]@ Users may register a listener that receives occupancy events in realtime.
** @(CHA-O4b)@ @[Testable]@ A subscription to occupancy events may be removed, after which it shall receive no further events.
** @(CHA-O4c)@ @[Testable]@ When a regular occupancy event is received on the channel (a standard PubSub occupancy event per the docs), the SDK will convert it into "occupancy event":#chat-structs-occupancy-event format and broadcast it to subscribers.
** @(CHA-O4d)@ @[Testable]@ If an invalid occupancy event is received on the channel, it shall be dropped.
to typing subscribers.
* @(CHA-O5)@ This specification point has been removed. It was valid up until the single-channel migration.
* @(CHA-O6)@ Enabling inband occupancy causes extra messages to be received by the client. Therefore, whether to receive these messages shall be user-configurable.
** @(CHA-O6a)@ @[Testable]@ If the @occupancy.enableInboundOccupancy@ is set to @true@, then the client shall set the @options.params.occupancy@ channel parameter to @"metrics"@ on the underlying realtime channel per @CHA-RC3@.
** @(CHA-O6b)@ @[Testable]@ If the @occupancy.enableInboundOccupancy@ is set to @false@, then the client shall not set the @options.params.occupancy@ channel parameter.
** @(CHA-O6c)@ @[Testable]@ The default value of @occupancy.enableInboundOccupancy@ is @false@.

h2(#rest-api). Chat HTTP REST API

h3(#rest-general). General

* @(CHA-RST1)@ REST API requests shall be made via the @request()@ method on the underling Ably SDK.
* @(CHA-RST2)@ REST API requests shall use the API Protocol Version of the underlying core SDK.
* @(CHA-RST3)@ @[Testable]@ REST API requests must be supported using @JSON@ and @msgpack@ as a @Content-Type@ (@useBinaryProtocol@ on the underlying Ably SDK)

h3(#rest-sending-messages). Sending Messages

h4(#rest-sending-messages-request-v3). Request V3

Below is the full REST payload format for the V3 endpoint. The @metadata@ and @headers@ keys are optional.

<pre>
  POST /chat/v3/rooms/<roomId>/messages
  {
    "text": "the message text",
    "metadata": {
      "foo": {
        "bar": 1
      }
    },
    "headers": {
      "baz": "qux"
    }
  }
</pre>

h4(#rest-sending-messages-response-v3). Response V3

A successful request shall result in status code @201 Created@.

The response body is as follows.

<pre>
  {
    "serial": "01726585978590-001@abcdefghij:001",
    "createdAt": 1726232498871
  }
</pre>

h4(#rest-sending-messages-realtime-v3). Corresponding Realtime Event V3

<pre>
  {
    "name": "chat.message"
    "encoding": "json"
    "data": {
      "text": "the message text",
      "metadata": {
        "foo": {
          "bar": 1
        }
      }
    },
    "timestamp": 1726232498871,
    "createdAt": 1726232498871,
    "extras": {
      "headers": {
        "baz": "qux"
      },
    },
    "serial": "01726585978590-001@abcdefghij:001",
    "action": "message.create",
    "version": "01726585978590-001@abcdefghij:001",
    "operation": {}
  }
</pre>

h3(#rest-updating-messages). Updating Messages

h4(#rest-updating-messages-request). Request

Below is the full REST payload format for the endpoint. The @description@, @headers@ and both @metadata@ keys are optional.

<pre>
  PUT /chat/v3/rooms/<roomId>/messages/<serial>
  {
    "message": {
      "text": "the new message text",
      "metadata": {
        "foo": {
          "bar": 1
        }
      },
      "headers": {
        "baz": "qux"
      },
    },
    "description": "why-the-action-was-performed"
    "metadata": {
      "foo": "bar"
    }
  }
</pre>

h4(#rest-updating-messages-request). Response

A successful request shall result in status code @200 Ok@.

The response body is as follows.

<pre>
  {
    "version": "01726585978590-001@abcdefghij:001",
    "timestamp": 1726585978590
  }
</pre>

h4(#rest-updating-messages-request). Corresponding Realtime Event

<pre>
  {
    "name": "chat.message"
    "encoding": "json"
    "data": {
      "text": "the new message text",
      "metadata": {
        "foo": {
          "bar": 1
        }
      }
    },
    "createdAt": 1726232498871,
    "timestamp": 1726585978590,
    "extras": {
      "headers": {
        "baz": "qux"
      }
    }
    "serial": "01726232498871-001@abcdefghij:001",
    "version": "01726585978590-001@abcdefghij:001"
    "action": "message.update"
    "operation": {
      "clientId": "who-performed-the-action",
      "description": "why-the-action-was-performed"
      "metadata": {
        "foo": "bar"
      }
    }
  }
</pre>

h3(#rest-deleting-messages). Deleting Messages

h4(#rest-deleting-messages-request). Request

Below is the full REST payload format for the endpoint.

<pre>
  POST /chat/v3/rooms/<roomId>/messages/<serial>/delete
  {
    "description": "why-the-action-was-performed"
    "metadata": {
      "foo": "bar"
    }
  }
</pre>

h4(#rest-deleting-messages-request). Response

A successful request shall result in status code @200 Ok@.

The response body is as follows.

<pre>
  {
    "version": "01826232498871-001@abcdefghij:001",
    "timestamp": 1826232498871
  }
</pre>

h4(#rest-deleting-messages-request). Corresponding Realtime Event

<pre>
  {
    "name": "chat.message"
    "encoding": "json"
    "data": {
      "text": "the original message text",
      "metadata": {
        "foo": {
          "bar": 1
        }
      }
    },
    "timestamp": "1726232498871",
    "extras": {
      "headers": {
        "baz": "qux"
      },
    }
    "serial": "01726585978590-001@abcdefghij:001",
    "action": "message.deleted"
    "timestamp": 1826232498871
    "createdAt": 1726585978590,
    "version": "01826232498871-001@abcdefghij:001",
    "operation": {
      "clientId": "who-performed-the-action",
      "description": "why-the-action-was-performed"
      "metadata": {
        "foo": "bar"
      },
    }
  }
</pre>

h3(#rest-fetching-messages). Fetching Message History

h4(#rest-fetching-messages-request). Request V3

<pre>
  GET /chat/v3/rooms/<roomId>/messages
</pre>

The method accepts query parameters identical to the standard Ably REST API.

h4(#rest-fetching-messages-response). Response V3

An array of V2 "@Message@ structs":#chat-structs-message-v2

h2(#realtime-api). Chat Realtime API

This section describes the message formats for chat events that occur over a Realtime connection.

h3(#realtime-room-reactions). Ephemeral Room Reactions

<pre>
  {
    "name": "roomReaction"
    "encoding": "json"
    "data": {
      "type": ":heart:",
      "metadata": {
        "foo": {
          "bar": 1
        }
      }
    },
    "timestamp": "1726232498871", // Only on incoming messages
    "extras": {
      "headers": {
        "baz": "qux"
      },
      "ephemeral": true, // This is set by the Chat SDK
    }
  }
</pre>

h3(#realtime-typing-message). Typing Message

<pre>
  {
    "name": "typing.started" // Required, must be either "typing.started" or "typing.stopped"
    "clientId": "who-is-typing", // Required, cannot be empty string or null - This is automatically set by the underlying pubsub SDK.
    "extras": { "ephemeral": true } // Required, must be set to true
  }
</pre>

h3(#rest-occupancy). Occupancy

h4(#rest-occupancy-request). Request

<pre>
  GET /chat/v3/rooms/<roomId>/occupancy
</pre>

h4(#rest-occupancy-response). Response

An "@OccupancyEvent@ struct":#chat-structs-occupancy


h2(#chat-structs). Chat Structs and Types

This section contains an overview of the key types in Chat. This is not intended to be prescriptive to implementation and different ecosystems may expose the underlying properties
in whichever format is most idiomatic to the platform.

h3(#chat-structs-room-options). RoomOptions

The RoomOptions struct describes configuration options for a Chat room. A property being set to a non-null value means that the feature is enabled. Some features have specific configuration.

<pre>
  {
    "presence": {
      "enter": boolean,
      "subscribe": boolean,
    },
    "typing": {
      "timeoutMs": number
    },
    "reactions": {}, // No properties, but must be non-null to enable feature.
    "occupancy": {}
  }
</pre>

h3(#chat-structs-message). Messages

h4(#chat-structs-message-v1). Messages V1 @(deprecated)@
<pre>
  {
    "timeserial": "cbfqxperABgItU52203559@1726232498871-0",
    "roomId": "my-room",
    "clientId": "who-sent-the-message",
    "text": "my-message",
    "createdAt": DateTime(),
    "metadata": {
      "foo": {
        "bar": 1
      }
    },
    "headers": {
      "baz": "qux"
    }
  }
</pre>

@(deprecated)@ Determining the global order of messages may be achieved by comparing the timeserials. See @CHA-M2@ for more information.

h4(#chat-structs-message-v2). Messages V2

<pre>
  {
    "serial": "01726585978590-001@abcdefghij:001",
    "roomId": "my-room",
    "clientId": "who-sent-the-message",
    "text": "my-message",
    "createdAt": DateTime(),
    "metadata": {
      "foo": {
        "bar": 1
      }
    },
    "headers": {
      "baz": "qux"
    }
    "action": "message.created",
    "version": "01726585978590-001@abcdefghij:001",
    "timestamp": DateTime(),
    "operation": {
        "clientId": "who-performed-the-action",
        "description": "why-the-action-was-performed"
        "metadata": {
          "foo": {
            "bar": 1
          }
        },
    }
  }
</pre>

There are getters provided in the @Message@ object to provide easy access to updated/deleted information:
* @isUpdated@ returns @true@ if the message is updated
* @isDeleted@ returns @true@ if the message is deleted
* @updatedBy@ returns the clientId from @operation.clientId@ if the message is updated, @undefined@ otherwise
* @deletedBy@ returns the clientId from @operation.clientId@ if the message is deleted, @undefined@ otherwise
* @updatedAt@ returns the @timestamp@ from the operation if the message is updated, @undefined@ otherwise
* @deletedAt@ returns the @timestamp@ from the operation if the message is deleted, @undefined@ otherwise

Determining the global order of messages may be achieved by lexicographically comparing the serials. See @CHA-M2@ for more information.

Determining the global order of message versions may be achieved by lexicographically comparing the @version@. See @CHA-M10@ for more information.

h3(#chat-structs-ephemeral-reactions). Ephemeral Room Reactions

<pre>
  {
    "type": ":heart:",
    "roomId": "my-room",
    "clientId": "who-sent-the-message",
    "createdAt": DateTime(),
    "metadata": {
      "foo": {
        "bar": 1
      }
    },
    "headers": {
      "baz": "qux"
    }
  }
</pre>

h3(#chat-structs-presence-member). Presence Member

<pre>
  {
    "clientId": "who-sent-the-message",
    "action": "enter",
    "updatedAt": DateTime(),
    "data": {}, // Whatever the user-provided data is. It must be destructured from the internal format we use.
    "extras": {
      "headers": {
        "baz": "qux"
      }
    }
  }
</pre>

h3(#chat-structs-presence-event). Presence Event

<pre>
  {
    "clientId": "who-is-in-presence",
    "action": "enter",
    "timestamp": DateTime(),
    "data": {}, // Whatever the user-provided data is. It must be destructured from the internal format we use.
  }
</pre>

h3(#chat-structs-typing-event). Typing Event @(deprecated)@

<pre>
  {
    "currentlyTyping": ["clientId-1", "clientID-2"],
  }
</pre>

h3(#chat-structs-typing-event-V2). Typing Event V2

<pre>
  {
    "change": {
        "type": "typing.started",
        "clientId": "clientId-2",
    },
    "currentlyTyping": ["clientId-1", "clientId-2"],
  }
</pre>

h3(#chat-structs-occupancy-event). Occupancy Event

<pre>
  {
    "connections": 5,
    "presenceMembers" 2,
  }
</pre>

h2(#error-codes). Chat-specific Error Codes

This section contains error codes that are specific to Chat. If a specific error code is not listed for a given circumstance, the most appropriate general error code shall be used. For example @400xx@ for client errors or @500xx@ for server errors.

For non-chat-specific codes, the status code for the error should align with the error code. For example, error code @40000@ should hav status code @400@.

<pre>

  // The request was invalid.
  BadRequest = 40000,

  // The message was rejected before publishing by a rule on the chat room.
  // To be accompanied by status code 422
  MessageRejectedByBeforePublishRule = 42211

  // The message was rejected before publishing by a moderation rule on the chat room.
  // To be accompanied by status code 422
  MessageRejectedByModeration = 42213

  // The room has experienced a discontinuity.
  // To be accompanied with status code 500.
  RoomDiscontinuity = 102100

  // Unable to perform operation;

  // Cannot perform operation because the room is in a failed state.
  // To be accompanied with status code 400.
  RoomInFailedState = 102101

  // Cannot perform operation because the room is in a releasing state.
  // To be accompanied with status code 400.
  RoomIsReleasing = 102102

  // Cannot perform operation because the room is in a released state.
  // To be accompanied with status code 400.
  RoomIsReleased = 102103

  // Cannot perform operation because the previous operation failed.
  // To be accompanied with status code 500.
  PreviousOperationFailed = 102104

  // An unknown error has happened in the room lifecycle.
  // To be accompanied with status code 500.
  RoomLifecycleError = 102105

  // Room was released before the operation could complete.
  // To be accompanied with status code 400.
  RoomReleasedBeforeOperationCompleted = 102106
</pre>
